var documenterSearchIndex = {"docs":
[{"location":"systems/#System-Structures","page":"Systems","title":"System Structures","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"Under the hood there are several different system structures that differ on what data they store. But you only need to call generic_system to build all of them. Depending on what information you provide you get different structure","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Build based on vector of atoms\n# generic_system(atoms::AbstractVector{SimpeAtom}; kwargs...)\ngeneric_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"), \n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]\n)\n\n# Same but added key for energy\ngeneric_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")];\n    energy = 10.0u\"eV\"\n)\n\n# Add cell to the system\ngeneric_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]; \n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"], \n    periodicity = (true, true, true)\n)\n\n# Create a system from an array of pairs\n# generic_system(AbstractVector(<:Pair); kwargs...)\nsys = generic_system([:H => [0.0, 0.0, 0.0]u\"Å\", :O => [1.0, 0.0, 0.0]u\"Å\"])\n\n# Create a system vectors of atom symbols, positions and velocities\n# geric_system(spc, pos, [vel]; kwargs...)\nsys = generic_system(\n    [:H, :O],\n    [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"],\n    [[0.1, 0.0, 0.0]u\"Å/s\", [0.2, 0.0, 0.0]u\"Å/s\"];\n)","category":"page"},{"location":"systems/#Build-System-from-Other-Systems","page":"Systems","title":"Build System from Other Systems","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"You can build system from other system and modify system global features","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Form a copy of old system\n# gneric_system(old_sys; kwargs...)\nnew_sys = generic_system(old_sys)\n\n# Copy system and add a global feature\nnew_sys = generic_system(old_sys; energy=10.0u\"eV\")\n\n# Copy system and add/change cell\nnew_sys = generic_system(\n    old_sys; \n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"],\n    periodicity = (true, true, true)\n)","category":"page"},{"location":"systems/#Create-a-Subsystem-from-an-Existing-System","page":"Systems","title":"Create a Subsystem from an Existing System","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"The created subsystem does not share any data with the system it was build","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Subsystem with atoms 1:5\n# generic_system(sys, subsys_definition...; kwargs...)\nsub_sys = generic_system(sys, 1:5)\n\n# Subsystem with all H and O atoms from sys\nsub_sys = generic_system(sys, ChemicalSpecies(:H), ChemicalSpecies(:O))\n\n# Add global feature to subsystem\nsub_sys = generic_system(sys, 1:5; label=\"the first 5 atoms\")","category":"page"},{"location":"systems/#Subsystem-Views","page":"Systems","title":"Subsystem Views","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"You can create subsystems that share all data with the host system by calling system_view","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Subsystem with atoms 1:5\n# system_view(sys, subsys_definition...)\nsyb_sys = system_view(sys, 1:5)\n\n# Subsystem with all H and O atoms from sys\nsub_sys = system_view(sys, ChemicalSpecies(:H), ChemicalSpecies(:O))","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Any changes you make to system_view structures is made to host system and vise versa.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Note that system_view does not see the global features of the host system.","category":"page"},{"location":"systems/#Changing-Systems","page":"Systems","title":"Changing Systems","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"AtomsBase defines funtions to modify structures, the following list is supported","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"set_position!(system, i, x) - all structures\nset_velocity!(system, i, v) - all structures that have velocity\nset_species!(system, i, spc) - all structures\nset_cell!(system, cell) - only for structures with PeriodicCell and to another PeriodicCell with same dimension. System view structures do not support cell update.\nset_cell_vectors!(system, bb) - same as for set_cell\nset_periodicity!(cell, pbc) - same as for set_cell\nappend!(system1, system2) - if systems have same information fields (e.g. both have velocity), same cell and dont have global features.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Example","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"sys = generic_system(\n    [:H, :O],\n    [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"],\n    [[0.1, 0.0, 0.0]u\"Å/s\", [0.2, 0.0, 0.0]u\"Å/s\"];\n)\n\nAtomsBase.set_position!(sys, 2, [0.0, 1.0, 0.0]u\"Å\")\nAtomsBase.set_velocity!(sys, 2, [0.0, 0.2, 0.0]u\"Å/s\")\nAtomsBase.set_species!(sys, 1, ChemicalSpecies(:N))","category":"page"},{"location":"utilities/#Quality-of-Life-Extensions-to-AtomsBase","page":"Utilities","title":"Quality of Life Extensions to AtomsBase","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Methods to change positions","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"center_of_mass(sys)\n\n# translate the whole system by r\ntranslate_system!(sys, r)\n\n# translate a copy of system by r\ntranslate_system(sys, r)\n\n# rotate the system\nusing Rotations\nrot = rand(RotMatrix{3})\nrotate_system!(sys, rot)\n\n# rotate a copy of the system\nrotate_system(sys, rot)","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Add system together or repeat them","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# make system that has sys2 added to sys1, keep sys1 and sys2 as they are\nadd_systems(sys1, sys2)\n\n# repeat system along cell vectors\n# repeat system 3 times along all cell vectors\nrepeat(sys, 3)\n\n# repeat 2 times on the first cell vector, 3 times on th esecond cell vector\n# and 4 times along the third cell vector\nrepeat(sys, (2,3,4))","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Methods to get information from systems","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# distance of atoms i and j as a vector\ndistance_vector(sys, i , j)\n\n# distance of atoms i and j\ndistance(sys, i, j)\n\n# bond angle of atom i, j and k (j->i vs j->k)\nbond_angle(sys, i, j, k)\n\n# dihedral angle of atoms i, j, k and m\ndihedral_angle(sys, i, j, k, m)","category":"page"},{"location":"utilities/#Fractional-Coordinate-Methods","page":"Utilities","title":"Fractional Coordinate Methods","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# get inverse cell of the system as matrix\ninv_cell(sys)\n\n# get cell_vectors as matrix\ncell_matrix(sys)\n\n# fractional coordinates of atom(s) i\nfractional_coordinates(sys, i)\n\n# fractional coordinates as matrix for atom(s) i\nfractional_coordinates_as_matrix(sys, i)\n\n# wrap atoms inside the cell\nwrap_coordinates!(sys)","category":"page"},{"location":"#AtomsSystems.jl","page":"Home","title":"AtomsSystems.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AtomsSystems.jl","category":"page"},{"location":"#AtomsSystems.add_systems-Union{Tuple{T}, Tuple{T, T}} where T<:AtomsSystems.AbstractIsolatedSystem","page":"Home","title":"AtomsSystems.add_systems","text":"add_systems(sys1::T, sys2::T) where {T<:AbstractIsolatedSystem}\n\nAppend two systems of the same type, returning a new system.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.bond_angle-Tuple{Any, Int64, Int64, Int64}","page":"Home","title":"AtomsSystems.bond_angle","text":"bond_angle(sys, i, j, k)\n\nCalculate the angle between atoms i, j, and k in the system sys.\n\nThe angle is defined as the angle between the vectors r_ij (from atom j to atom i) and r_jk (from atom j to atom k).\n\nYou can use rad2deg to convert the result to degrees.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.cell_matrix-Tuple{Any}","page":"Home","title":"AtomsSystems.cell_matrix","text":"cell_matrix(sys)\n\nReturn the cell matrix of the sys with the cell vectors as columns.\n\nWorks when sys has cell_vectors defined.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.center_of_mass-Tuple{Any}","page":"Home","title":"AtomsSystems.center_of_mass","text":"center_of_mass(sys)\n\nReturn the center of mass of the system sys.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.dihedral_angle-Tuple{Any, Vararg{Int64, 4}}","page":"Home","title":"AtomsSystems.dihedral_angle","text":"dihedral_angle(sys, i, j, k, m)\n\nCalculate the dihedral angle between atoms i, j, k, and m in the system sys.\n\nThe dihedral angle is defined as the angle between the planes defined by the atoms i, j, k and j, k, m.\n\nYou can use rad2deg to convert the result to degrees.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.distance-Tuple{Union{AbstractSystem, AbstractArray{SimpleAtom{D, TD, TP}, 1} where {D, TD, TP}}, Int64, Int64}","page":"Home","title":"AtomsSystems.distance","text":"distance(sys, i, j)\n\nReturn the distance between atom i and atom j in the system sys.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.distance_vector-Tuple{Union{AtomsSystems.AbstractIsolatedSystem, AbstractArray{SimpleAtom{D, TD, TP}, 1} where {D, TD, TP}}, Int64, Int64}","page":"Home","title":"AtomsSystems.distance_vector","text":"distance_vector(sys, i, j)\n\nReturn the distance vector between atom i and atom j in the system sys.\n\nNote, currently only works for orthorombic cells or isolated systems.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.fractional_coordinates-Union{Tuple{T}, Tuple{D}, Tuple{Union{IsolatedCell{D}, PeriodicCell{D}}, StaticArraysCore.SVector{D, T}}} where {D, T}","page":"Home","title":"AtomsSystems.fractional_coordinates","text":"fractional_coordinates(sys, r)\nfractional_coordinates(cell, r)\n\nReturn the fractional coordinates of the position r in the cell cell. If AtomsBase.AbstractSystem sys is given, the cell is taken from it.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.fractional_coordinates_as_matrix-Tuple{AbstractSystem, Any}","page":"Home","title":"AtomsSystems.fractional_coordinates_as_matrix","text":"fractional_coordinates_as_matrix(sys, i)\n\nReturn the fractional coordinates of atom(s) i in the system sys as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.fractional_coordinates_as_matrix-Union{Tuple{T}, Tuple{D}, Tuple{Union{IsolatedCell{D}, PeriodicCell{D}}, AbstractArray{StaticArraysCore.SVector{D, T}, 1}}} where {D, T<:(Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U})}","page":"Home","title":"AtomsSystems.fractional_coordinates_as_matrix","text":"fractional_coordinates_as_matrix(cell, coord)\n\nSame as fractional_coordinates, but returns the fractional coordinates as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.generic_system-Tuple{AbstractArray{SimpleAtom{D, TD, TP}, 1} where {D, TD, TP}}","page":"Home","title":"AtomsSystems.generic_system","text":"generic_system(vec_atoms::AbstractVector{<:AtomsBase.Atom}; kwargs...)\n\nCreate a system from an array of atoms, with optional keyword arguments to set system properties.\n\nIf cell is not specified, the new system will have an isolated cell.\n\nExamples\n\n# Create a system from an array of atoms\nsys = generic_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"), \n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]\n)\n\n# Create a system and set energy\nsys = generic_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")];\n    energy = 10.0u\"eV\"\n)\n\n# Create a system and set cell vectors and periodicity\nsys = generic_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]; \n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"], \n    periodicity = (true, true, true)\n)\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.generic_system-Tuple{AbstractSystem, Any}","page":"Home","title":"AtomsSystems.generic_system","text":"generic_system(sys::AbstractSystem, i; kwargs...)\ngeneric_system(sys::AbstractSystem, vspc::ChemicalSpecies...; kwargs...)\n\nCreate a subsystem from an existing system and a selection of atoms, allowing to set additional properties via keyword arguments.\n\nThe new subsystem allocates its own data and does not share any data with the original system.\n\nExamples\n\n# Create a subsystem with atoms 1:5 from an existing system\nsys = generic_system(some_system, 1:5)\n\n# Create a sybsys with specific species from an existing system\nsys = generic_system(some_system, ChemicalSpecies(:H), ChemicalSpecies(:O))\n\n# Create a subsystem and set energy\nsys = generic_system(some_system, 1:5; energy = 10.0u\"eV\")\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.generic_system-Tuple{AbstractSystem}","page":"Home","title":"AtomsSystems.generic_system","text":"generic_system(sys::AbstractSystem; kwargs...)\n\nCreate a system from an existing system, allowing to update the cell or other system wide properties.\n\nThe new system is a copy of the original system, it does not share any data with the original system.\n\nExamples\n\n# form a come of a system\nsys = generic_system(some_system)\n\n# form a copy and add energy\nsys = generic_system(some_system; energy = 10.0u\"eV\")\n\n# Create a system with updated cell vectors and periodicity\nsys = generic_system(some_system; cell_vectors = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]u\"Å\", periodicity = (true, true, true))\nmy_cell = PeriodicCell([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]u\"Å\", (true, true, true))\nsys = generic_system(some_system; cell = my_cell)\n\n# Copy of a system with changed cell vectors\nsys = generic_system(some_system; cell_vectors = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]u\"Å\")\n\n# Copy some_system and take cell from another system\nsys = generic_system(some_system; cell = cell(another_system))\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.generic_system-Tuple{AbstractVector{<:Pair}}","page":"Home","title":"AtomsSystems.generic_system","text":"generic_system(prs::AbstractVector{<:Pair}; kwargs...)\n\nCreate a system from an array of pairs, where each pair consists of a species and a position. The new system is a copy of the original system, allowing to set additional properties via keyword arguments.\n\nIf cell is not specified, the new system will have an isolated cell.\n\nExamples\n\n# Create a system from an array of pairs\nsys = generic_system([:H => [0.0, 0.0, 0.0]u\"Å\", :O => [1.0, 0.0, 0.0]u\"Å\"])\n\n# Create a system and set energy\nsys = generic_system([:H => [0.0, 0.0, 0.0]u\"Å\", :O => [1.0, 0.0, 0.0]u\"Å\"]; energy = 10.0u\"eV\")\n\n# Create a system with cell vectors and periodicity\nsys = generic_system([\n    :H => [0.0, 0.0, 0.0]u\"Å\", \n    :O => [1.0, 0.0, 0.0]u\"Å\"];\n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"], \n    periodicity = (true, true, true)\n)\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.generic_system-Tuple{AbstractVector{<:Union{ChemicalSpecies, AbstractString, Integer, Symbol}}, AbstractVector{<:AbstractVector}}","page":"Home","title":"AtomsSystems.generic_system","text":"generic_system(species, r; kwargs...)\ngeneric_system(species, r, v; kwargs...)\n\nCreate a system from an array of species and positions, with optional keyword arguments to set system properties.\n\nIf cell is not specified, the new system will have an isolated cell.\n\nExamples\n\n# Create a system from species and positions\nsys = generic_system([:H, :O], [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"])\n\n# Create a system and set energy\nsys = generic_system([:H, :O], [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"]; energy = 10.0u\"eV\")\n\n# Create a system and set cell vectors and periodicity\nsys = generic_system(\n    [:H, :O],\n    [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"]; \n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"], \n    periodicity = (true, true, true)\n)\n\n# Create a system with velocities\nsys = generic_system(\n    [:H, :O],\n    [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"],\n    [[0.1, 0.0, 0.0]u\"Å/s\", [0.2, 0.0, 0.0]u\"Å/s\"];\n    energy = 10.0u\"eV\"\n)\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.inv_cell-Tuple{Any}","page":"Home","title":"AtomsSystems.inv_cell","text":"inv_cell(sys)\n\nReturn the inverse of the cell matrix of the AbstractSystem sys or cell.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.position_as_matrix-Tuple{AbstractSystem, Any}","page":"Home","title":"AtomsSystems.position_as_matrix","text":"position_as_matrix(sys, i)\n\nReturn the position of atom(s) i in the system sys as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.rotate_system!-Tuple{AtomsSystems.AbstractIsolatedSystem, Rotations.Rotation}","page":"Home","title":"AtomsSystems.rotate_system!","text":"rotate_system!(sys, r)\n\nRotate the system sys by the rotation r.\n\nNote, this function does work only for isolated systems.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.rotate_system-Tuple{AbstractSystem, Rotations.Rotation}","page":"Home","title":"AtomsSystems.rotate_system","text":"rotate_system(sys, r)\n\nCopy system sys and rotate it by the rotation r. Orignal system is not modified.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.system_view-Tuple{Union{SimpleSystem, SimpleSystemView}, Any}","page":"Home","title":"AtomsSystems.system_view","text":"system_view(sys, i)\nsystem_view(sys, spc...)\n\nCreate a view of a system for the given indices or species.\n\nThis does not create a copy of the system, but rather a view of the existing system and thus does not allocate memory (except for the view itself).\n\nExample\n\n# Create a view of a system with atoms 2 to 30\nsubsys = system_view(sys, 2:30)\n\n# Create a view of a system with species Si and Al\nsubsys = system_view(sys, ChemicalSpecies(:Si), ChemicalSpecies(:Al))\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.translate_system!-Union{Tuple{D}, Tuple{AbstractSystem{D}, AbstractVector{<:Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}}} where D","page":"Home","title":"AtomsSystems.translate_system!","text":"translate_system!(sys, r)\n\nTranslate the system sys by the vector r.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.translate_system-Union{Tuple{D}, Tuple{AbstractSystem{D}, StaticArraysCore.SVector{D, <:Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}}} where D","page":"Home","title":"AtomsSystems.translate_system","text":"translate_system(sys, r)\n\nCopy system sys and translate it by the vector r. Orignal system is not modified.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.wrap_coordinates!-Tuple{Any}","page":"Home","title":"AtomsSystems.wrap_coordinates!","text":"wrap_coordinates!(sys)\nwrap_coordinates!(cell, coord)\n\nWrap the coordinates to given cell.\n\nIf sys is given, the cell is taken from it. \n\nIf cell is given, the new coordinates are returned.\n\n\n\n\n\n","category":"method"},{"location":"#Base.repeat-Tuple{CellSystem{3}, Tuple{var\"#s18\", var\"#s18\", var\"#s18\"} where var\"#s18\"<:Integer}","page":"Home","title":"Base.repeat","text":"repeat(sys, n)\n\nRepeat the system sys in all three dimensions by the factors n and return the new system. Original system is not modified.\n\n\n\n\n\n","category":"method"},{"location":"#AtomsSystems.AtomicPropertySystemView","page":"Home","title":"AtomsSystems.AtomicPropertySystemView","text":"AtomicPropertySystemView{D, LU, TB, TP, TI, SM, L}\n\nView subsystem of a system that contains species, position, and additional atomic properties.\n\nIt is recommended to use system_view function to create a view of the system instead of creating this type directly.\n\nParameter Definitions\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit length of the system.\nTB: Type of the base system (e.g., SimpleSystemView).\nTP: Type of the atomic properties (e.g., SVector{D, T}).\nTI: Type index for SubArray used for the view.\nSM: Type of the atomic properties (e.g., SVector{D, T}).\nL:  True when SybArray uses linear indexing, false otherwise.\n\n\n\n\n\n","category":"type"},{"location":"#AtomsSystems.CellSystemView","page":"Home","title":"AtomsSystems.CellSystemView","text":"CellSystemView{D, LU, TB, TC}\n\nView subsystem of a system that contains a base system and a cell.\n\nIt is recommended to use system_view function to create a view of the system instead of creating this type directly.\n\nParameter Definitions\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit length of the system.\nTB: Type of the base system (e.g., SimpleSystemView).\nTC: Type of the cell (has to be subtype of PeriodicCell).\n\n\n\n\n\n","category":"type"},{"location":"#AtomsSystems.SimpleAtom","page":"Home","title":"AtomsSystems.SimpleAtom","text":"SimpleAtom(id::AtomsBase.AtomId, r::SVector; kwargs...)\nSimpleAtom(id::AtomsBase.AtomId, r::SVector, v::SVector; kwargs...)\nSimpleAtom(sa::SimpleAtom; kwargs...\n\nStucture to represent a single atom with species, position, and optional velocity and other properties.\n\nThe SimpleAtom is bitstype when the data is bitstypes.\n\nMass is set to the mass of the species by default, but can be overridden with a keyword argument.\n\nExamples\n\nSimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\", [0.1, 0.0, 0.0]u\"Å/s\"; mass = 16.0u\"u\", charge = -1.0u\"q\")\nSimpleAtom(ChemicalSpecies(:H), [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom( :O => [1.0, 0.0, 0.0]u\"Å\" )\n\n\n\n\n\n","category":"type"},{"location":"#AtomsSystems.SimpleSystem","page":"Home","title":"AtomsSystems.SimpleSystem","text":"SimpleSystem{D, LU, TP} <: AbstractSimpleSystem{D, LU}\n\nA simple system that holds only species and positions of atoms, without any additional properties.\n\nSimpleSystem has IsolatedCell as its cell.\n\nNo intended to be called directly. Intead use generic_system to build systems.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions (LU=unit(TP)).\nTP: Type of position vector, in form of SVector{D, TP} where TP is a unitful length type.\n\nFields\n\nspecies: A vector of ChemicalSpecies representing the species of each atom.\nposition: A vector of position vectors, each of type SVector{D, TP}.\n\n\n\n\n\n","category":"type"},{"location":"#AtomsSystems.SimpleSystemView","page":"Home","title":"AtomsSystems.SimpleSystemView","text":"SimpleSystemView{D, LU, TP, TI, L}\n\nView subsystem of a system that contains only species and position.\n\nIt is recommended to use system_view function to create a view of the system instead of creating this type directly.\n\nParameter Definitions\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit length of the system.\nTP: Type of position vector (e.g., SVector{D, T}).\nTI: Type index for SubArray used for the view.\nL:  True when SybArray uses linear indexing, false otherwise.\n\nExample\n\n# crete view of a system with atoms 2 to 30\nsubsys = SimpleSystemView(sys, 2:30)\n\n\n\n\n\n","category":"type"},{"location":"#AtomsSystems.SimpleVelocitySystemView","page":"Home","title":"AtomsSystems.SimpleVelocitySystemView","text":"SimpleVelocitySystemView{D, LU, TP, TV, TI, L}\n\nView subsystem of a system that contains species, position, and velocity.\n\nIt is recommended to use system_view function to create a view of the system instead of creating this type directly.\n\nParameter Definitions\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit length of the system.\nTP: Type of position vector (e.g., SVector{D, T}).\nTV: Type of velocity vector (e.g., SVector{D, T}).\nTI: Type index for SubArray used for the view.\nL:  True when SybArray uses linear indexing, false otherwise.\n\nExample\n\n```julia\n\nCreate view of a system with atoms 2 to 30\n\nsubsys = SimpleVelocitySystemView(sys, 2:30) ````\n\n\n\n\n\n","category":"type"},{"location":"atoms/#Atom-Structure","page":"Atoms","title":"Atom Structure","text":"","category":"section"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"New atom structure SimpleAtom is a bits type structure that aims to be a simple small structure.","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"You can create SimpleAtom in one of the following ways","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom( 1, [0.0, 0.0, 0.0]u\"Å\") # same as above\nSimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\", [0.1, 0.0, 0.0]u\"Å/s\"; mass = 16.0u\"u\", charge = -1.0u\"q\")\nSimpleAtom(ChemicalSpecies(:H), [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom( :O => [1.0, 0.0, 0.0]u\"Å\" )","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"Comparison to AtomsBase Atom","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"julia> ab_atom = AtomsBase.Atom( :O, [1.0, 0.0, 0.0]u\"Å\" )\nAtom(O, Z = 8, m = 15.999 u):\n    position          : [1,0,0]u\"Å\"\n    species           : O\n\njulia> sa = SimpleAtom( :O, [1.0, 0.0, 0.0]u\"Å\" )\nSimpleAtom(O, Z = 8, m = 15.999 u):\n    position          : [1,0,0]u\"Å\"\n    species           : O\n\njulia> Base.summarysize(ab_atom)\n456\n\njulia> Base.summarysize(sa)\n32\n\njulia> isbits(ab_atom)\nfalse\n\njulia> isbits(sa)\ntrue","category":"page"}]
}
