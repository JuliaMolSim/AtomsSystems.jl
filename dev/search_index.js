var documenterSearchIndex = {"docs":
[{"location":"chemfiles/#Chemfiles-Extension","page":"Chemfiles Extension","title":"Chemfiles Extension","text":"","category":"section"},{"location":"chemfiles/","page":"Chemfiles Extension","title":"Chemfiles Extension","text":"AtomsSystems - Chemfiles extension allows you to load files with Chemfiles.","category":"page"},{"location":"chemfiles/","page":"Chemfiles Extension","title":"Chemfiles Extension","text":"This is mainly intended to be implemented in AtomsIO, but the interface is there, if you want to use it.","category":"page"},{"location":"chemfiles/","page":"Chemfiles Extension","title":"Chemfiles Extension","text":"using AtomsSystems\nusing Chemfiles\n\n\n# read a frame\nsys = Trajectory(\"example.xyz\") do trajectory\n    frame = read(trajectory, 0) # adjust to read a different frame\n    CellSystem(frame)\nend","category":"page"},{"location":"chemfiles/#Trajectories-with-Chemfiles","page":"Chemfiles Extension","title":"Trajectories with Chemfiles","text":"","category":"section"},{"location":"chemfiles/","page":"Chemfiles Extension","title":"Chemfiles Extension","text":"Trajectories have an extension that allows them to be loaded directly from a file","category":"page"},{"location":"chemfiles/","page":"Chemfiles Extension","title":"Chemfiles Extension","text":"using AtomsSystems\nusing AtomsSystems.AtomsTrajectories\nusing Chemfiles\n\n# Works with all Chemfiles supported trajectories\ntraj = VariableVolumeTrajectory(\"trajectory file\")\n\n# If you know the trajectory has constant volume\ntraj = ConstantVolumeTrajectory(\"trajectory file\") ","category":"page"},{"location":"chemfiles/","page":"Chemfiles Extension","title":"Chemfiles Extension","text":"You can also give keyword argument species_from that allows loading species information form a different file","category":"page"},{"location":"chemfiles/","page":"Chemfiles Extension","title":"Chemfiles Extension","text":"traj = VariableVolumeTrajectory(\"trajectory file\"; species_from=\"file with species information\")","category":"page"},{"location":"trajectory/#Trajectory-Submodule","page":"Trajectories","title":"Trajectory Submodule","text":"","category":"section"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"note: \nTrajectory submodule is still work in progress. While it works, there is a lot of room to improve.","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"Experimental trajectory submodule adds support for trajectory structures that are subtypes of AbstractVector{AbstractSystem}. These are more optimized than simply storing systems in a vector.","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"The optimizations come from the fact that data structures are only allocated once for the trajectory not for each frame.","category":"page"},{"location":"trajectory/#Trajectory-types","page":"Trajectories","title":"Trajectory types","text":"","category":"section"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"The basic principle is same as with systems. The structures are layered with additional properties.","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"SimpleTrajectory - species and position only\nSimpleVelocityTrajectory - species, position and velocity\nConstantVolumeTrajectory - constant cell trajectory\nVariableVolumeTrajectory - cell can change for each frame","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"All trajectory types expect that number of atoms and species are constants.","category":"page"},{"location":"trajectory/#Examples","page":"Trajectories","title":"Examples","text":"","category":"section"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"You can create trajectories by giving vector of systems as and input","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"using AtomsBase\nusing AtomsSystems\nusing AtomsSystems.AtomsTrajectories\n\nfirst_frame = generic_system\"\"\"\n    H 0 0 0\n    O 1 0 0\n\"\"\"\n\nsecond_frame = generic_system\"\"\"\n    H 0   0 0\n    O 1.1 0 0\n\"\"\"\n\ntraj = VariableVolumeTrajectory([first_frame, second_frame])","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"or by creating trajectory by giving first frame and then pushing to the system ","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"traj = VariableVolumeTrajectory(first_frame)\n\npush!(traj, second_frame)","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"To use you can just index it","category":"page"},{"location":"trajectory/","page":"Trajectories","title":"Trajectories","text":"traj[2]","category":"page"},{"location":"systems/#System-Structures","page":"Systems","title":"System Structures","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"Under the hood there are several different system structures that differ on what data they store. You only need to call generic_system to build all of them. The basic principle is that the system is optimized to carry only the information you give.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"The most simple system is build by giving only species and positions","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Use macro to build system with xyz-file style syntax\ngeneric_system\"\"\"\n    H 0 0 0\n    O 1 0 0\n\"\"\"\n\n# Build based on vector of species and positions\n# generic_system(species, position; kwargs...)\ngeneric_system(\n    [:H, :O],\n    [ [0.0, 0.0, 0.0]u\"Å\",  [1.0, 0.0, 0.0]u\"Å\" ]\n)\n\n# Save with vector of atoms\n# generic_system(atoms::AbstractVector{SimpeAtom}; kwargs...)\ngeneric_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"), \n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]\n)","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Keyword arguments can be used to add global features ","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Add global features at build\ngeneric_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")];\n    energy = 10.0u\"eV\",\n    label  = \"my sys\"\n)\n\n# or add global features to an existing system\nsys = generic_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"), \n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]\n)\n# generic_system(sys; kwargs...) - style\nsys = generic_system(sys; energy = 10.0u\"eV\", label  = \"my sys\" )","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"To add velocity you can do some of the following","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"\n# using vectors - generic_system(spc, pos, [vel]; kwargs...)\ngeneric_system(\n    [:H, :O],\n    [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"],\n    [[0.1, 0.0, 0.0]u\"Å/s\", [0.2, 0.0, 0.0]u\"Å/s\"];\n)\n\n# or with atoms\ngeneric_system(\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\", [0.1, 0.0, 0.0]u\"Å/s\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\", [0.2, 0.0, 0.0]u\"Å/s\")\n)\n\n# or add velocity to existing system\nsys = generic_system\"\"\"\n    H 0 0 0\n    O 1 0 0\n\"\"\"\n# using generic_system(sys, vel) call\nsys = generic_system(sys, [[0.1, 0.0, 0.0]u\"Å/s\", [0.2, 0.0, 0.0]u\"Å/s\"])","category":"page"},{"location":"systems/#Add-Cell-to-the-System","page":"Systems","title":"Add Cell to the System","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"generic_system can alter cell, if given as a keyword argument. You can give only cell_vectors, in this case periodicity is set to (true,true,true). ","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Add cell to the system by giving only cell vectors\ngeneric_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]; \n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"], \n    #periodicity = (true, true, true) this comes by default, but you can edit it\n)","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"You can also add a cell to an existing system by keyword arguments","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"sys = generic_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"), \n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]\n)\n\nsys = generic_system(\n    sys;\n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"],\n)","category":"page"},{"location":"systems/#Create-a-Subsystem-from-an-Existing-System","page":"Systems","title":"Create a Subsystem from an Existing System","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"You can give selection parameters for generic_system command to create subsystems. The created systems are allocated, so they do not share common data with the original system.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Subsystem with atoms 1:5\n# generic_system(sys, subsys_definition...; kwargs...)\nsub_sys = generic_system(sys, 1:5)\n\n# Subsystem with all H and O atoms from sys\nsub_sys = generic_system(sys, ChemicalSpecies(:H), ChemicalSpecies(:O))\n\n# Add global feature to subsystem\nsub_sys = generic_system(sys, 1:5; label=\"the first 5 atoms\")","category":"page"},{"location":"systems/#Subsystem-Views","page":"Systems","title":"Subsystem Views","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"system_view allows you to create subsystems that share all data with the original system.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"# Subsystem with atoms 1:5\n# system_view(sys, subsys_definition...)\nsyb_sys = system_view(sys, 1:5)\n\n# Subsystem with all H and O atoms from sys\nsub_sys = system_view(sys, ChemicalSpecies(:H), ChemicalSpecies(:O))","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Any changes you make to system_view structures is made to the host system and vise versa.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Note that system_view does not see the global features of the host system.","category":"page"},{"location":"systems/#Changing-Systems","page":"Systems","title":"Changing Systems","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"AtomsBase defines funtions to modify structures, the following list is supported:","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"set_position!(system, i, x) - all structures\nset_velocity!(system, i, v) - all structures that have velocity\nset_species!(system, i, spc) - all structures\nset_cell!(system, cell) - only for structures with PeriodicCell and to another PeriodicCell with same dimension. System view structures do not support cell update.\nset_cell_vectors!(system, bb) - same as for set_cell\nset_periodicity!(cell, pbc) - same as for set_cell\nappend!(system1, system2) - if systems have same information fields (e.g. both have velocity), same cell and dont have global features.\ndeleteat!(system, i) - all systems excluding system views.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Example","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"sys = generic_system(\n    [:H, :O],\n    [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"],\n    [[0.1, 0.0, 0.0]u\"Å/s\", [0.2, 0.0, 0.0]u\"Å/s\"];\n)\n\nAtomsBase.set_position!(sys, 2, [0.0, 1.0, 0.0]u\"Å\")\nAtomsBase.set_velocity!(sys, 2, [0.0, 0.2, 0.0]u\"Å/s\")\nAtomsBase.set_species!(sys, 1, ChemicalSpecies(:N))","category":"page"},{"location":"systems/#System-Structures-Explained","page":"Systems","title":"System Structures Explained","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"There are following abstract types defined","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"AbstractCompositeSystem{D, LU} - supertype for all structures and a subtype of AbstractSystem{D}\nAbstractIsolatedSystem{D, LU} - supertype for system with isolated cell (no cell information)\nAbstractSimpleSystem{D, LU} - lowest level of systems that store data for species, position and velocity","category":"page"},{"location":"systems/#SimpleSystems","page":"Systems","title":"SimpleSystems","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"The simplest types that are subtypes of AbstractSimpleSystem are","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"SimpleSystem - holds only species and positions\nSimpleVelocitySystem - holds species, position and velocity","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Every system structure is either directly one of these or holds a one. ","category":"page"},{"location":"systems/#CompositeSystems","page":"Systems","title":"CompositeSystems","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"Composite systems are system structures that hold a system, called base_system, and some additional information to that system.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"For example CellSystem has following definition","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"mutable struct CellSystem{D, LU, TB, TC} <: AbstractCompositeSystem{D, LU}\n    base_system::TB\n    cell::TC\n    function CellSystem(sys::AbstractIsolatedSystem{D, LU}, cell::PeriodicCell{D,T}) where {D, LU, T}\n        new{D, LU, typeof(sys), typeof(cell)}(sys, cell)\n    end\nend","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"that adds PeriodicCell to a system that does not have cell.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"AtomicPropertySystem is another composite system. It takes in a AbstractSimpleSystem and adds atomic properties to it. That is properties like charge, custom mass, etc.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Finally there is GeneralSystem that adds global features. Note that GeneralSystem should never be called directly. Call instead generic_system.","category":"page"},{"location":"systems/#Using-Different-Systems-Directly-Control-What-Information-is-Stored","page":"Systems","title":"Using Different Systems Directly Control What Information is Stored","text":"","category":"section"},{"location":"systems/","page":"Systems","title":"Systems","text":"You can use different systems to control what information is stored. This allows you to drop features you don't need.","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Lets build a system what has a lots of features using AtomsBaseTesting","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"using AtomsBase\nusing AtomsBaseTesting\nusing AtomsSystems\nusing Unitful\n\nref = make_test_system()\nsys = generic_system(ref.system)","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"As you can see it has a lot of features. If you only need species and positions you can use SimpleSystem","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"SimpleSystem(sys)","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"Similarly using SimpleVelocitySystem allows limiting to species, position and velocities","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"SimpleVelocitySystem(sys)","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"AtomicPropertySystem preserves all atomic properties, but ignores cell and global features","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"AtomicPropertySystem(sys)","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"CellSystem drops global features, but rest is preserved","category":"page"},{"location":"systems/","page":"Systems","title":"Systems","text":"CellSystem(sys)","category":"page"},{"location":"end_index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"end_index/#AtomsSystems.add_systems-Union{Tuple{T}, Tuple{T, T}} where T<:AtomsSystems.AbstractIsolatedSystem","page":"Index","title":"AtomsSystems.add_systems","text":"add_systems(sys1::T, sys2::T) where {T<:AbstractIsolatedSystem}\n\nAppend two systems of the same type, returning a new system.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.bond_angle-Tuple{Any, Int64, Int64, Int64}","page":"Index","title":"AtomsSystems.bond_angle","text":"bond_angle(sys, i, j, k)\n\nCalculate the angle between atoms i, j, and k in the system sys.\n\nThe angle is defined as the angle between the vectors r_ij (from atom j to atom i) and r_jk (from atom j to atom k).\n\nYou can use rad2deg to convert the result to degrees.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.cell_matrix-Tuple{Any}","page":"Index","title":"AtomsSystems.cell_matrix","text":"cell_matrix(sys)\n\nReturn the cell matrix of the sys with the cell vectors as columns.\n\nWorks when sys has cell_vectors defined.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.center_of_mass-Tuple{Any}","page":"Index","title":"AtomsSystems.center_of_mass","text":"center_of_mass(sys)\n\nReturn the center of mass of the system sys.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.dihedral_angle-Tuple{Any, Vararg{Int64, 4}}","page":"Index","title":"AtomsSystems.dihedral_angle","text":"dihedral_angle(sys, i, j, k, m)\n\nCalculate the dihedral angle between atoms i, j, k, and m in the system sys.\n\nThe dihedral angle is defined as the angle between the planes defined by the atoms i, j, k and j, k, m.\n\nYou can use rad2deg to convert the result to degrees.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.distance-Tuple{Union{AbstractSystem, AbstractArray{SimpleAtom{D, TD, TP}, 1} where {D, TD, TP}}, Int64, Int64}","page":"Index","title":"AtomsSystems.distance","text":"distance(sys, i, j)\ndistance(sys1, sys2)\n\nReturn the distance between atom i and atom j in the system sys. If sys1 and sys2 are given, the distance between all atoms in sys1 and sys2 is returned.\n\nYou can use system_view to take subsystems of the system and calculate distances between them.\n\nMinimum image convention is used for periodic systems, so the distance is always the shortest distance between the atoms.\n\nExamples\n\ndistance(sys, 1, 2)    # returns the distance between atom 1 and atom 2\ndistance(sys, 2, :)    # returns the distances from atom 2 to all other atoms\ndistance(sys, 1, 2:5)  # returns the distances from atom 1 to atoms 2, 3, 4, and 5\n\ndistance( system_view(sys, 1:2), system_view(sys, 3:5) )\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.distance_vector-Tuple{Union{AtomsSystems.AbstractIsolatedSystem, AbstractArray{SimpleAtom{D, TD, TP}, 1} where {D, TD, TP}}, Int64, Int64}","page":"Index","title":"AtomsSystems.distance_vector","text":"distance_vector(sys, i, j)\n\nReturn the distance vector between atom i and atom j in the system sys.\n\nExamples\n\ndistance_vector(sys, 1, 2)   # returns the vector from atom 1 to atom 2\ndistance_vector(sys, 2, 4:6) # returns the vectors from atom 2 to atoms 4, 5, and 6\ndistance_vector(sys, 1, :)   # returns the vectors from atom 1 to all other atoms\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.fractional_coordinates-Union{Tuple{T}, Tuple{D}, Tuple{Union{IsolatedCell{D}, PeriodicCell{D}}, StaticArraysCore.SVector{D, T}}} where {D, T}","page":"Index","title":"AtomsSystems.fractional_coordinates","text":"fractional_coordinates(sys, r)\nfractional_coordinates(cell, r)\n\nReturn the fractional coordinates of the position r in the cell cell. If AtomsBase.AbstractSystem sys is given, the cell is taken from it.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.fractional_coordinates_as_matrix-Tuple{AbstractSystem, Any}","page":"Index","title":"AtomsSystems.fractional_coordinates_as_matrix","text":"fractional_coordinates_as_matrix(sys, i)\n\nReturn the fractional coordinates of atom(s) i in the system sys as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.fractional_coordinates_as_matrix-Union{Tuple{T}, Tuple{D}, Tuple{Union{IsolatedCell{D}, PeriodicCell{D}}, AbstractArray{StaticArraysCore.SVector{D, T}, 1}}} where {D, T<:(Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U})}","page":"Index","title":"AtomsSystems.fractional_coordinates_as_matrix","text":"fractional_coordinates_as_matrix(cell, coord)\n\nSame as fractional_coordinates, but returns the fractional coordinates as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.generic_system-Tuple{AbstractArray{SimpleAtom{D, TD, TP}, 1} where {D, TD, TP}}","page":"Index","title":"AtomsSystems.generic_system","text":"generic_system(vec_atoms::AbstractVector{<:AtomsBase.Atom}; kwargs...)\n\nCreate a system from an array of atoms, with optional keyword arguments to set system properties.\n\nIf cell is not specified, the new system will have an isolated cell.\n\nExamples\n\n# Create a system from an array of atoms\nsys = generic_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"), \n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]\n)\n\n# Create a system and set energy\nsys = generic_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")];\n    energy = 10.0u\"eV\"\n)\n\n# Create a system and set cell vectors and periodicity\nsys = generic_system([\n    SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\"),\n    SimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\")]; \n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"], \n    periodicity = (true, true, true)\n)\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.generic_system-Tuple{AbstractSystem, Any}","page":"Index","title":"AtomsSystems.generic_system","text":"generic_system(sys::AbstractSystem, i; kwargs...)\ngeneric_system(sys::AbstractSystem, vspc::ChemicalSpecies...; kwargs...)\n\nCreate a subsystem from an existing system and a selection of atoms, allowing to set additional properties via keyword arguments.\n\nThe new subsystem allocates its own data and does not share any data with the original system.\n\nExamples\n\n# Create a subsystem with atoms 1:5 from an existing system\nsys = generic_system(some_system, 1:5)\n\n# Create a sybsys with specific species from an existing system\nsys = generic_system(some_system, ChemicalSpecies(:H), ChemicalSpecies(:O))\n\n# Create a subsystem and set energy\nsys = generic_system(some_system, 1:5; energy = 10.0u\"eV\")\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.generic_system-Tuple{AbstractSystem}","page":"Index","title":"AtomsSystems.generic_system","text":"generic_system(sys::AbstractSystem; kwargs...)\n\nCreate a system from an existing system, allowing to update the cell or other system wide properties.\n\nThe new system is a copy of the original system, it does not share any data with the original system.\n\nExamples\n\n# form a come of a system\nsys = generic_system(some_system)\n\n# form a copy and add energy\nsys = generic_system(some_system; energy = 10.0u\"eV\")\n\n# Create a system with updated cell vectors and periodicity\nsys = generic_system(some_system; cell_vectors = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]u\"Å\", periodicity = (true, true, true))\nmy_cell = PeriodicCell([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]u\"Å\", (true, true, true))\nsys = generic_system(some_system; cell = my_cell)\n\n# Copy of a system with changed cell vectors\nsys = generic_system(some_system; cell_vectors = [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]u\"Å\")\n\n# Copy some_system and take cell from another system\nsys = generic_system(some_system; cell = cell(another_system))\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.generic_system-Tuple{AbstractVector{<:Pair}}","page":"Index","title":"AtomsSystems.generic_system","text":"generic_system(prs::AbstractVector{<:Pair}; kwargs...)\n\nCreate a system from an array of pairs, where each pair consists of a species and a position. The new system is a copy of the original system, allowing to set additional properties via keyword arguments.\n\nIf cell is not specified, the new system will have an isolated cell.\n\nExamples\n\n# Create a system from an array of pairs\nsys = generic_system([:H => [0.0, 0.0, 0.0]u\"Å\", :O => [1.0, 0.0, 0.0]u\"Å\"])\n\n# Create a system and set energy\nsys = generic_system([:H => [0.0, 0.0, 0.0]u\"Å\", :O => [1.0, 0.0, 0.0]u\"Å\"]; energy = 10.0u\"eV\")\n\n# Create a system with cell vectors and periodicity\nsys = generic_system([\n    :H => [0.0, 0.0, 0.0]u\"Å\", \n    :O => [1.0, 0.0, 0.0]u\"Å\"];\n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"], \n    periodicity = (true, true, true)\n)\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.generic_system-Tuple{AbstractVector{<:Union{ChemicalSpecies, AbstractString, Integer, Symbol}}, AbstractVector{<:AbstractVector}}","page":"Index","title":"AtomsSystems.generic_system","text":"generic_system(species, r; kwargs...)\ngeneric_system(species, r, v; kwargs...)\n\nCreate a system from an array of species and positions, with optional keyword arguments to set system properties.\n\nIf cell is not specified, the new system will have an isolated cell.\n\nExamples\n\n# Create a system from species and positions\nsys = generic_system([:H, :O], [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"])\n\n# Create a system and set energy\nsys = generic_system([:H, :O], [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"]; energy = 10.0u\"eV\")\n\n# Create a system and set cell vectors and periodicity\nsys = generic_system(\n    [:H, :O],\n    [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"]; \n    cell_vectors = [[1.0, 0.0, 0.0]u\"Å\", [0.0, 1.0, 0.0]u\"Å\", [0.0, 0.0, 1.0]u\"Å\"], \n    periodicity = (true, true, true)\n)\n\n# Create a system with velocities\nsys = generic_system(\n    [:H, :O],\n    [[0.0, 0.0, 0.0]u\"Å\", [1.0, 0.0, 0.0]u\"Å\"],\n    [[0.1, 0.0, 0.0]u\"Å/s\", [0.2, 0.0, 0.0]u\"Å/s\"];\n    energy = 10.0u\"eV\"\n)\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.generic_system-Union{Tuple{D}, Tuple{AbstractSystem{D}, AbstractVector{<:AbstractVector{<:Union{Quantity{T, 𝐋 𝐓^-1, U}, Level{L, S, Quantity{T, 𝐋 𝐓^-1, U}} where {L, S}} where {T, U}}}}} where D","page":"Index","title":"AtomsSystems.generic_system","text":"generic_system(sys::AbstractSystem{D}, v::AbstractVector{<:AbstractVector{<:Unitful.Velocity}}) where {D}\n\nCreate a system from an existing system and a vector of velocities.\n\nThis allows you to add velocities to a system while keeping the original system's properties.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.inv_cell-Tuple{Any}","page":"Index","title":"AtomsSystems.inv_cell","text":"inv_cell(sys)\n\nReturn the inverse of the cell matrix of the AbstractSystem sys or cell.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.position_as_matrix-Tuple{AbstractSystem, Any}","page":"Index","title":"AtomsSystems.position_as_matrix","text":"position_as_matrix(sys, i)\n\nReturn the position of atom(s) i in the system sys as a matrix.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.rattle_positions","page":"Index","title":"AtomsSystems.rattle_positions","text":"rattle_positions(sys, q)\nrattle_positions!(sys, q)\n\nRattle the positions of atoms in the system sys by a random vector of length q. The random vector is in random uniform direction and uniform length in the range 0 <= r < q.\n\nIf q is not a Unitful.Length, it is assumed to be in the unit of the positions in the system.\n\n\n\n\n\n","category":"function"},{"location":"end_index/#AtomsSystems.rattle_positions!-Union{Tuple{D}, Tuple{AbstractSystem{D}, Any}} where D","page":"Index","title":"AtomsSystems.rattle_positions!","text":"rattle_positions(sys, q)\nrattle_positions!(sys, q)\n\nRattle the positions of atoms in the system sys by a random vector of length q. The random vector is in random uniform direction and uniform length in the range 0 <= r < q.\n\nIf q is not a Unitful.Length, it is assumed to be in the unit of the positions in the system.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.rotate_system!-Union{Tuple{D}, Tuple{AtomsSystems.AbstractIsolatedSystem{D}, Rotations.Rotation{D}}} where D","page":"Index","title":"AtomsSystems.rotate_system!","text":"rotate_system!(sys, r)\n\nRotate the system sys by the rotation r.\n\nNote, this function does work only for isolated systems.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.rotate_system-Union{Tuple{D}, Tuple{AbstractSystem{D}, Rotations.Rotation{D}}} where D","page":"Index","title":"AtomsSystems.rotate_system","text":"rotate_system(sys, r)\n\nCopy system sys and rotate it by the rotation r. Orignal system is not modified.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.system_view-Tuple{Union{SimpleSystem, SimpleSystemView}, Any}","page":"Index","title":"AtomsSystems.system_view","text":"system_view(sys, i)\nsystem_view(sys, spc...)\n\nCreate a view of a system for the given indices or species.\n\nThis does not create a copy of the system, but rather a view of the existing system and thus does not allocate memory (except for the view itself).\n\nExample\n\n# Create a view of a system with atoms 2 to 30\nsubsys = system_view(sys, 2:30)\n\n# Create a view of a system with species Si and Al\nsubsys = system_view(sys, ChemicalSpecies(:Si), ChemicalSpecies(:Al))\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.translate_system!-Union{Tuple{D}, Tuple{AbstractSystem{D}, AbstractVector{<:Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}}} where D","page":"Index","title":"AtomsSystems.translate_system!","text":"translate_system!(sys, r)\n\nTranslate the system sys by the vector r.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.translate_system-Union{Tuple{D}, Tuple{AbstractSystem{D}, StaticArraysCore.SVector{D, <:Union{Quantity{T, 𝐋, U}, Level{L, S, Quantity{T, 𝐋, U}} where {L, S}} where {T, U}}}} where D","page":"Index","title":"AtomsSystems.translate_system","text":"translate_system(sys, r)\n\nCopy system sys and translate it by the vector r. Orignal system is not modified.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.wrap_coordinates!-Tuple{Any}","page":"Index","title":"AtomsSystems.wrap_coordinates!","text":"wrap_coordinates!(sys)\nwrap_coordinates!(cell, coord)\n\nWrap the coordinates to given cell.\n\nIf sys is given, the cell is taken from it. \n\nIf cell is given, the new coordinates are returned.\n\n\n\n\n\n","category":"method"},{"location":"end_index/#Base.repeat-Union{Tuple{D}, Tuple{CellSystem{D}, NTuple{D, var\"#s18\"} where var\"#s18\"<:Integer}} where D","page":"Index","title":"Base.repeat","text":"repeat(sys, n)\n\nRepeat the system sys in all three dimensions by the factors n and return the new system. Original system is not modified.\n\nThis works only for systems with PeriodicCell that is CellSystem. You can convert other systems to CellSystem with CellSystem(sys).\n\nExamples\n\nrepeat(sys, (2, 2, 2)) # repeats the system in all three dimensions by a factor of 2\nrepeat(sys, 2)         # same as above, but with a single integer\n\n\n\n\n\n","category":"method"},{"location":"end_index/#AtomsSystems.AtomicPropertySystem","page":"Index","title":"AtomsSystems.AtomicPropertySystem","text":"AtomicPropertySystem{D, LU, TB, TP, SM}\n\nA system that contains atomic properties in addition to the basic attributes of atoms. \n\nThis system is designed to work with AbstractSimpleSystem and allows for the storage of additional properties for each atom, such as custom mass, charge, or any other custom property.\n\nIt is recommeded to use generic_system to create instances of this system.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions.\nTB: Type of the base system, either SimpleSystem or SimpleVelocitySystem.\nTP: Type of the atomic properties (NamedTuple).\nSM: Boolean indicating if the system has a custom mass property.\n\nFields\n\nbase_system: The base system, which is either a SimpleSystem or a SimpleVelocitySystem.\natom_properties: A vector of TB containing the properties of each atom.\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.AtomicPropertySystemView","page":"Index","title":"AtomsSystems.AtomicPropertySystemView","text":"AtomicPropertySystemView{D, LU, TB, TP, TI, SM, L}\n\nView subsystem of a system that contains species, position, and additional atomic properties.\n\nIt is recommended to use system_view function to create a view of the system instead of creating this type directly.\n\nParameter Definitions\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit length of the system.\nTB: Type of the base system (e.g., SimpleSystemView).\nTP: Type of the atomic properties (e.g., SVector{D, T}).\nTI: Type index for SubArray used for the view.\nSM: Boolean indicating if the system has a custom mass property.\nL:  True when SybArray uses linear indexing, false otherwise.\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.CellSystem","page":"Index","title":"AtomsSystems.CellSystem","text":"CellSystem{D, LU, TB, TC}\n\nA system that represents a collection of atoms in a PeriodicCell.\n\nNot intended to be called directly. Instead, use generic_system to build systems.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions.\nTB: Type of the base system.\nTC: Type of the cell, which is a PeriodicCell{D}.\n\nFields\n\nbase_system: The base system, which is either an AtomicPropertySystem or a SimpleSystem or a SimpleVelocitySystem.\ncell: The periodic cell that defines the boundaries and periodicity of the system.  \n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.CellSystemView","page":"Index","title":"AtomsSystems.CellSystemView","text":"CellSystemView{D, LU, TB, TC}\n\nView subsystem of a system that contains a base system and a cell.\n\nIt is recommended to use system_view function to create a view of the system instead of creating this type directly.\n\nParameter Definitions\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit length of the system.\nTB: Type of the base system (e.g., SimpleSystemView).\nTC: Type of the cell (has to be subtype of PeriodicCell).\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.GeneralSystem","page":"Index","title":"AtomsSystems.GeneralSystem","text":"GeneralSystem{D, LU, TB} <: AbstractCompositeSystem{D, LU}\n\nThis is the most generic system type that can hold any system properties.\n\nTo build this use always the generic_system function. This type is meant to be used only on the background.\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.SimpleAtom","page":"Index","title":"AtomsSystems.SimpleAtom","text":"SimpleAtom(id::AtomsBase.AtomId, r::SVector; kwargs...)\nSimpleAtom(id::AtomsBase.AtomId, r::SVector, v::SVector; kwargs...)\nSimpleAtom(sa::SimpleAtom; kwargs...\n\nStucture to represent a single atom with species, position, and optional velocity and other properties.\n\nThe SimpleAtom is bitstype when the data is bitstypes.\n\nMass is set to the mass of the species by default, but can be overridden with a keyword argument.\n\nExamples\n\nSimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\", [0.1, 0.0, 0.0]u\"Å/s\"; mass = 16.0u\"u\", charge = -1.0u\"q\")\nSimpleAtom(ChemicalSpecies(:H), [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom( :O => [1.0, 0.0, 0.0]u\"Å\" )\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.SimpleSystem","page":"Index","title":"AtomsSystems.SimpleSystem","text":"SimpleSystem{D, LU, TP} <: AbstractSimpleSystem{D, LU}\n\nA simple system that holds only species and positions of atoms, without any additional properties.\n\nSimpleSystem has IsolatedCell as its cell.\n\nNo intended to be called directly. Instead use generic_system to build systems.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions (LU=unit(TP)).\nTP: Type of position vector, in form of SVector{D, TP} where TP is a unitful length type.\n\nFields\n\nspecies: A vector of ChemicalSpecies representing the species of each atom.\nposition: A vector of position vectors, each of type SVector{D, TP}.\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.SimpleSystemView","page":"Index","title":"AtomsSystems.SimpleSystemView","text":"SimpleSystemView{D, LU, TP, TI, L}\n\nView subsystem of a system that contains only species and position.\n\nIt is recommended to use system_view function to create a view of the system instead of creating this type directly.\n\nParameter Definitions\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit length of the system.\nTP: Type of position vector (e.g., SVector{D, T}).\nTI: Type index for SubArray used for the view.\nL:  True when SybArray uses linear indexing, false otherwise.\n\nExample\n\n# crete view of a system with atoms 2 to 30\nsubsys = SimpleSystemView(sys, 2:30)\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.SimpleVelocitySystem","page":"Index","title":"AtomsSystems.SimpleVelocitySystem","text":"SimpleVelocitySystem{D, LU, UV, TP, TV} <: AbstractSimpleSystem{D, LU}\n\nSystem that holds species, positions, and velocities of atoms.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions (LU=unit(TP)).\nUV: Unit of velocity for velocities (UV=unit(TV)).\nTP: Type of position vector, in form of SVector{D, TP} where TP is a unitful length type.\nTV: Type of velocity vector, in form of SVector{D, TV} where TV is a unitful velocity type.\n\nNo intended to be called directly. Instead use generic_system to build systems.\n\nFields\n\nspecies: A vector of ChemicalSpecies representing the species of each atom.\nposition: A vector of position vectors, each of type SVector{D, TP}.\nvelocity: A vector of velocity vectors, each of type SVector{D, TV}.\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.SimpleVelocitySystemView","page":"Index","title":"AtomsSystems.SimpleVelocitySystemView","text":"SimpleVelocitySystemView{D, LU, TP, TV, TI, L}\n\nView subsystem of a system that contains species, position, and velocity.\n\nIt is recommended to use system_view function to create a view of the system instead of creating this type directly.\n\nParameter Definitions\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit length of the system.\nTP: Type of position vector (e.g., SVector{D, T}).\nTV: Type of velocity vector (e.g., SVector{D, T}).\nTI: Type index for SubArray used for the view.\nL:  True when SybArray uses linear indexing, false otherwise.\n\nExample\n\n# Create view of a system with atoms 2 to 30\nsubsys = SimpleVelocitySystemView(sys, 2:30)\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.AtomsTrajectories.ConstantVolumeTrajectory","page":"Index","title":"AtomsSystems.AtomsTrajectories.ConstantVolumeTrajectory","text":"ConstantVolumeTrajectory{D, LU, TP, TB} <: AbstractCellTrajectory{D, LU, TP}\n\nA trajectory with constant cell. Use VariableVolumeTrajectory for trajectories with changing cell.\n\nThis should be used only if you know that the cell does not change during the trajectory. It is a bit more efficient than VariableVolumeTrajectory because it only stores once cell for the whole trajectory.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions.\nTP: Type of positions Unitful.Length.\nTB: Type of the base trajectory, which is a SimpleVelocityTrajectory or SimpleTrajectory.\n\nFields\n\nbase_trajectory: The base trajectory, which is either a SimpleVelocityTrajectory or a SimpleTrajectory.\ncell: The periodic cell that defines the boundaries and periodicity for the trajectory.\n\nExample\n\ntraj = ConstantVolumeTrajectory(first_frame)\npush!(traj, second_frame) \n\n# Chemfiles extension\nusing Chemfiles\ntraj = ConstantVolumeTrajectory(\"path/to/trajectory\")\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.AtomsTrajectories.SimpleTrajectory","page":"Index","title":"AtomsSystems.AtomsTrajectories.SimpleTrajectory","text":"SimpleTrajectory{D, LU, TP} <: AbstractSimpleTrajectory{D, LU, TP}\n\nA simple trajectory that contains only positions and species of atoms.\n\nThis trajectory has isolated cell and is used to layer on top of other trajectories that have more complex cell structures.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions.\nTP: Type of positions, which is a Unitful.Length.\n\nFields\n\nspecies: A vector of ChemicalSpecies representing the species of atoms in the trajectory.\nposition: A vector of SVector{D, TP} representing the positions of atoms in the trajectory.\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.AtomsTrajectories.SimpleVelocityTrajectory","page":"Index","title":"AtomsSystems.AtomsTrajectories.SimpleVelocityTrajectory","text":"SimpleVelocityTrajectory{D, LU, TP, TV} <: AbstractSimpleTrajectory{D, LU, TP}\n\nA simple trajectory that contains positions, velocities and species of atoms.\n\nThis trajectory has isolated cell and is used to layer on top of other trajectories that have more complex cell structures.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions.\nTP: Type of positions, which is a Unitful.Length.\nTV: Type of velocities, which is a Unitful.Velocity.\n\nFields\n\nspecies: A vector of ChemicalSpecies representing the species of atoms in the trajectory  \nposition: A vector of SVector{D, TP} representing the positions of atoms in the trajectory.\nvelocity: A vector of SVector{D, TV} representing the velocities of atoms in the trajectory.\n\n\n\n\n\n","category":"type"},{"location":"end_index/#AtomsSystems.AtomsTrajectories.VariableVolumeTrajectory","page":"Index","title":"AtomsSystems.AtomsTrajectories.VariableVolumeTrajectory","text":"VariableVolumeTrajectory{D, LU, TP, TB} <: AbstractCellTrajectory{D, LU, TP}\n\nA trajectory that allows volume changes. This is done by storing cell for each frame separately.\n\nCells are PeriodicCell. For isolates cell trajectories the return type is either SimpleTrajectory or SimpleVelocityTrajectory.\n\nChemfiles extension provides a way to read trajectories from files.\n\nType Parameters\n\nD: Dimension of the system (e.g., 2 or 3).\nLU: Unit of length for positions.\nTP: Type of positions Unitful.Length.\nTB: Type of the base trajectory, which is a SimpleVelocityTrajectory or SimpleTrajectory.\n\nFields\n\nbase_trajectory: The base trajectory, which is either a SimpleVelocityTrajectory or a SimpleTrajectory.\ncell: A vector of periodic cells, one for each frame\n\nExample\n\ntraj = VariableVolumeTrajectory(first_frame)\npush!(traj, second_frame)\n\n# Chemfiles extension\nusing Chemfiles\ntraj = ConstantVolumeTrajectory(\"path/to/trajectory\")\n\n\n\n\n\n","category":"type"},{"location":"utilities/#Quality-of-Life-Extensions-to-AtomsBase","page":"Utilities","title":"Quality of Life Extensions to AtomsBase","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Methods to change positions","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"center_of_mass(sys)\n\n# translate the whole system by r\ntranslate_system!(sys, r)\n\n# translate a copy of system by r\ntranslate_system(sys, r)\n\n# rotate the system\nusing Rotations\nrot = rand(RotMatrix{3})\nrotate_system!(sys, rot)\n\n# rotate a copy of the system\nrotate_system(sys, rot)\n\n# rattle positions\nrattle_positions(sys, 0.1)\nrattle_positions!(sys, 0.1u\"Å\")","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Add system together or repeat them","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# make system that has sys2 added to sys1, keep sys1 and sys2 as they are\nadd_systems(sys1, sys2)\n\n# repeat system along cell vectors\n# repeat system 3 times along all cell vectors\nrepeat(sys, 3)\n\n# repeat 2 times on the first cell vector, 3 times on th esecond cell vector\n# and 4 times along the third cell vector\nrepeat(sys, (2,3,4))","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"Methods to get information from systems","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# distance of atoms i and j as a vector\ndistance_vector(sys, i , j)\n\n# distance of atoms i and j\ndistance(sys, i, j)\n\n# bond angle of atom i, j and k (j->i vs j->k)\nbond_angle(sys, i, j, k)\n\n# dihedral angle of atoms i, j, k and m\ndihedral_angle(sys, i, j, k, m)","category":"page"},{"location":"utilities/#Fractional-Coordinate-Methods","page":"Utilities","title":"Fractional Coordinate Methods","text":"","category":"section"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"# get inverse cell of the system as matrix\ninv_cell(sys)\n\n# get cell_vectors as matrix\ncell_matrix(sys)\n\n# fractional coordinates of atom(s) i\nfractional_coordinates(sys, i)\n\n# fractional coordinates as matrix for atom(s) i\nfractional_coordinates_as_matrix(sys, i)\n\n# wrap atoms inside the cell\nwrap_coordinates!(sys)","category":"page"},{"location":"#AtomsSystems.jl","page":"Home","title":"AtomsSystems.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AtomsSystems is meant to provide updated AtomsBase systems structures over the standard FlexibleSystem and FastSystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally AtomsSystem provides some useful utilities, like fractional coordinates.","category":"page"},{"location":"atoms/#Atom-Structure","page":"Atoms","title":"Atom Structure","text":"","category":"section"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"New atom structure SimpleAtom is a bits type structure that aims to be a simple small structure.","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"The main advantage of SimpleAtom over the default atom type of AtomsBase is that it is bitstype. The second advantage is that it does not have Dict to hold custom data, thus making it a lot more smaller data structure.  ","category":"page"},{"location":"atoms/#Create-SimpleAtoms","page":"Atoms","title":"Create SimpleAtoms","text":"","category":"section"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"You can create SimpleAtom in one of the following ways","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom( 1, [0.0, 0.0, 0.0]u\"Å\") # same as above\nSimpleAtom(:O, [1.0, 0.0, 0.0]u\"Å\", [0.1, 0.0, 0.0]u\"Å/s\"; mass = 16.0u\"u\", charge = -1.0u\"q\")\nSimpleAtom(ChemicalSpecies(:H), [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom( :O => [1.0, 0.0, 0.0]u\"Å\" )","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"You can add extra atomkeys to an existing atom, by creating a new SimpleAtom and adding a keyword argument","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"sa = SimpleAtom(:H, [0.0, 0.0, 0.0]u\"Å\")\nSimpleAtom(sa; charge = 1.0u\"q\" ) # add charge","category":"page"},{"location":"atoms/#Vector-of-SimpleAtoms","page":"Atoms","title":"Vector of SimpleAtoms","text":"","category":"section"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"Vector os SimpleAtoms has basic AtomsBase interface implemented","category":"page"},{"location":"atoms/","page":"Atoms","title":"Atoms","text":"va = [ SimpleAtom(i, i * ones(3)u\"Å\") for i in 1:5 ]\n\nspecies(va, 3)\n\nposition(va, 4)\n\nmass(va, :)\n\nhasatomkey(va, :velocity)\n\ncell(va)","category":"page"}]
}
